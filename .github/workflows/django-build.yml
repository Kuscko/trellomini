name: Deploy Django

on:
  push:
    branches: [main]

jobs:
  test:
    name: Test Django App
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: trellomini

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.test.txt

      - name: Create .env file
        run: |
          echo "EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
          echo "EMAIL_SUBJECT_PREFIX=${{ secrets.EMAIL_SUBJECT_PREFIX }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env

      - name: Run Django checks and tests
        run: |
          python manage.py check
          pytest

  deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: trellomini

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
          echo "EMAIL_SUBJECT_PREFIX=${{ secrets.EMAIL_SUBJECT_PREFIX }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env

      - name: Run Django checks
        run: |
          python manage.py check

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create short SHA variable
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
  
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./trellomini
          file: ./trellomini/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/trellomini:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/trellomini:${{ env.SHORT_SHA }}
